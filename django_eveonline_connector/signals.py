from django.contrib.auth.models import User, Group
from django_eveonline_connector.models import EveTokenType
from django.dispatch import receiver
from django.db.models.signals import m2m_changed, post_save, post_delete
from django.db import transaction
from django.core.exceptions import PermissionDenied
from django.apps import apps
from django.core.cache import cache
from django_eveonline_connector.models import EveClient
import logging
logger = logging.getLogger(__name__)

@receiver(m2m_changed, sender=EveTokenType.scopes.through)
def eve_token_type_scopes_updated(sender, **kwargs):
    action = kwargs.get('action')
    triggered_actions = ["post_remove", "post_add"]
    eve_token_type = kwargs.get('instance')

    if action in triggered_actions:
        cache_search_string = 'ESI_SSO_URL:scopes=%s' % eve_token_type.get_scopes_string()
        logger.debug("Searching cache for %s" % cache_search_string)
        if cache_search_string in cache:
            logger.debug("Cache hit: %s" % cache_search_string)
            eve_token_type.esi_sso_url = cache.get(cache_search_string)
        else:
            logger.debug("Cache miss: %s" % cache_search_string)
            eve_token_type.esi_sso_url = EveClient.get_esi_security().get_auth_uri(
                scopes=eve_token_type.get_scopes_list(),
                state=EveClient.get_instance().esi_client_id,
            )
            cache.set(cache_search_string, eve_token_type.esi_sso_url, timeout=15)
        eve_token_type.save()
    elif action == "post_clear":
        required_scopes = apps.get_app_config('django_eveonline_connector').required_scopes
        eve_token_type.scopes.set(required_scopes)

@receiver(post_save, sender=EveTokenType) 
def eve_token_type_save(sender, **kwargs):
    eve_token_type = kwargs.get('instance')
    if eve_token_type.scopes.all():
        return 

    required_scopes = apps.get_app_config('django_eveonline_connector').required_scopes
    logger.debug("Setting default scopes (%s) for TokenType %s" % (required_scopes, eve_token_type))
    eve_token_type.scopes.set(required_scopes)

@receiver(post_delete, sender=EveTokenType)
def eve_token_generate_default_token(sender, **kwargs):
    logger.debug("Checking if %s is the last token" % kwargs.get('instance'))
    if EveTokenType.objects.all().count() == 0:
        EveTokenType.objects.create(name="Default Token Type", description="Generated by system")
        raise Exception("EveTokenType must have at least 1 instance")